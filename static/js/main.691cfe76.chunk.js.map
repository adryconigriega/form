{"version":3,"sources":["errors.js","input.js","updateAction.js","form.js","result.js","App.js","serviceWorker.js","index.js"],"names":["Errors","props","error","type","InputForm","value","inputName","register","useFormContext","InputReturned","FormControlLabel","control","Radio","label","errorMessage","name","ref","InputEmail","required","labelName","InputText","maxLength","defaultProps","updateAction","state","payload","data","InfoForm","action","useStateMachine","methods","useForm","useState","setDataSubmitted","formOk","setFormOk","errorMessageCheckBox","setErrorMessageCheckBox","msg","param","location","setErrorReponseServer","checkboxs","ValidationCheckBoxs","datasend","validation","forEach","itemsend","key","includes","itembox","MessageValidation","Alert","variant","Heading","className","CepecFormRequest","align","onSubmit","handleSubmit","datajson","Object","entries","map","console","log","axios","post","then","reponse","errors","catch","email","as","RadioGroup","lastname","item","fonction","company","departement","adress","numberadress","npa","pays","tel","comments","Result","Row","Col","md","Card","style","width","ListGroup","Item","height","createStore","App","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.691cfe76.chunk.js","sourcesContent":["import React  from 'react';\n\nfunction Errors(props) {\n\n\n\n    return (\n\n        <div>\n            { props.error && props.error.type === 'required' && <span>Ce champ est obligatoire</span>}\n            { props.error && props.error.type === 'maxLength' && <span>Le champ dépasse les 30 caractères</span>}\n        </div>\n    )\n\n}\n\nexport default Errors","import React from 'react';\nimport {useFormContext } from \"react-hook-form\";\nimport { FormControlLabel, Radio } from \"@material-ui/core\";\n\nimport Errors from './errors';\n\nInputForm.defaultProps = {\n    type: \"text\",\n    required: false,\n    maxLength: 30\n}\n\nfunction InputForm (props) {\n\n    const { register } = useFormContext();\n\n    var InputReturned = null\n    const InputText = (labelName, type, inputName, register, errorMessage) =>  <div><label>{labelName}:  <input type={type} name={inputName} ref={register} /> </label>\n                                                                                <Errors error={errorMessage}> </Errors> \n                                                                               </div>\n\n    const InputRadio = (value, inputName) => <FormControlLabel value={value} control={<Radio/>} label={inputName}/> \n\n    const InputEmail = (type, inputName, register, errorMessage) => <div> <label>Email:  <input type={type} name={inputName} ref={register} /> </label> \n                                                    <Errors error={errorMessage}> </Errors> </div>\n\n    switch (props.type) {\n        case \"radio\":\n            InputReturned = InputRadio(props.value,props.inputName)\n            break;\n        case \"email\":\n            InputReturned = InputEmail(props.type,props.inputName, register({ required: props.required } ), props.error)\n            break;\n        default: InputReturned = InputText(props.labelName, props.type, props.inputName, register({ required: props.required, maxLength: props.maxLength}), props.error)\n            break; \n    }\n\n\n    return (\n        InputReturned \n    )\n\n}\n\n\nexport default InputForm;","export default function updateAction(state, payload) {\n    return {\n      ...state,\n      data: {\n        ...state.data,\n        ...payload\n      }\n    };\n  }\n  ","import React, { useState } from 'react';\nimport { useForm, FormContext, Controller } from \"react-hook-form\"\nimport { useStateMachine } from \"little-state-machine\";\nimport './style.css';\nimport InputForm from './input';\nimport { RadioGroup } from \"@material-ui/core\";\nimport updateAction from './updateAction';\nimport axios from 'axios';\nimport { Alert, ListGroup  } from 'react-bootstrap'; \n\n\nfunction InfoForm (props) { \n \n\n  //CONSTANTES \n\n  const { action } = useStateMachine(updateAction); //MAJ des données \n  const methods = useForm(); //Contient tous les méthodes pour gérer le formulaire (données et comportement)\n  const [dataSubmitted, setDataSubmitted] = useState(); //Données exploitatables du formulaire (tableau) + méthode MAJ du tableau\n  const [formOk, setFormOk] = useState(false); //État de la validation du formulaire\n  var [errorMessageCheckBox, setErrorMessageCheckBox] = useState() //Message d'erreur pour les checkboxs\n  var [errorReponseServer, setErrorReponseServer] = useState([{value:\"\", msg: \"\", param:\"\", location:\"\"}]) // Tableau d'erreurs retourné par le serveur\n\n  // Définition d'un groupe de checkboxs \n  const [checkboxs ] = useState([\n    {inputName: \"cbox1\", labelName:\"Choix 1\"},\n    {inputName: \"cbox2\", labelName:\"Choix 2\"},\n    {inputName: \"cbox3\", labelName:\"Choix 3\"},\n  ])\n\n  //METHODES \n\n  // Envoie des données au serveur et récupération de la réponse en JSON\n  const onSubmit = data => { \n    action(data);\n  //Création d'un tableau à partir de DATA avec key + value\n  const datajson = Object.entries(data).map(([key, value]) => ({key, value}))\n\n  if (ValidationCheckBoxs(checkboxs, datajson)) {\n      console.log('validé')\n      axios.post('http://localhost:4000/', data)\n        .then( reponse => {\n          console.log(reponse.data.errors)\n          setDataSubmitted(reponse)\n          setErrorReponseServer(reponse.data.errors)\n          setFormOk(true)\n        })\n        .catch(error => {\n          console.log(error)\n        })\n        \n    }\n    else {\n      console.log('non validé')\n      setErrorMessageCheckBox(<span>Veuillez cocher au moins une case</span>)\n    }\n       \n  }\n  \n  //Validation des checkboxs \n\n  const ValidationCheckBoxs = (checkboxs, datasend) => {\n\n    var validation = false \n\n    datasend.forEach(itemsend => {\n      if (itemsend.key.includes('cbox')) {\n        checkboxs.forEach(itembox => {\n          if (itemsend.key === itembox.inputName) {\n              if (itemsend.value) {\n                validation = true\n              }\n          }\n        });\n      }\n    });\n\n    return (validation)\n\n  }\n  \n \n\n  const MessageValidation = <div>\n                            <Alert variant=\"success\">\n                            <Alert.Heading>Benchmarking Services</Alert.Heading>\n                            <p> Demande d'information </p>\n                            <hr /> \n                            <p className=\"mb-0\">\n                                Votre demande d'information a été enregistrée.<br></br>\n                                Nous vous remercions de votre intérêt pour nos services.<br></br>\n\n                                Nous allons prendre prochainement contact avec vous. <br></br>\n                         \n\n                            </p>\n                            </Alert> \n                            </div>\n\n  const MessagesErrorServer = <Alert variant=\"danger\">\n                              <Alert.Heading>Benchmarking Services</Alert.Heading>\n                              <p> Demande d'information </p>\n                              <hr />\n                              <p className=\"mb-0\">\n                                  Votre demande d'information contient les erreurs suivantes: <br></br>\n                          {/*     <ListGroup>\n                                <ListGroup.item>{errorReponseServer[0].msg}</ListGroup.item>\n                              </ListGroup> */}\n\n                              </p>\n                              </Alert>\n                            \n\n  const CepecFormRequest = <FormContext {...methods} > \n\n                            <h1>Formulaire</h1>\n                            \n                            <form align=\"left\" onSubmit={methods.handleSubmit(onSubmit)}> \n\n                              <InputForm error={methods.errors.email} type=\"email\" inputName=\"email\"> </InputForm>\n                                \n                              <label>Salutations</label> \n\n                              <Controller as={ <RadioGroup name=\"salutations\"> \n                                <InputForm type=\"radio\" inputName=\"monsieur\" value=\"Monsieur\" ></InputForm>\n                                <InputForm type=\"radio\" inputName=\"madame\" value=\"Madame\" ></InputForm>\n                              </RadioGroup> } name=\"salutations\" control={methods.control} />\n                              \n                              <InputForm error={methods.errors.lastname} inputName=\"lastname\" labelName=\"Nom\" ></InputForm> \n                              <InputForm error={methods.errors.name} inputName=\"name\" labelName=\"Prénom\"> </InputForm> \n\n                              <label>Group CheckBox</label>\n\n                                \n                              <InputForm type=\"checkbox\" inputName=\"fonction\" labelName=\"Fonction\" ></InputForm>\n                              <InputForm type=\"checkbox\" inputName=\"fonction2\" labelName=\"Fonction2\" ></InputForm> \n\n                              \n                              {checkboxs.map((item) => (\n                                <InputForm type=\"checkbox\" inputName={item.inputName} labelName={item.labelName} ></InputForm>\n                              ))}\n                              {errorMessageCheckBox}\n\n                              <InputForm error={methods.errors.fonction}  inputName=\"fonction\" labelName=\"Fonction\" ></InputForm> \n                              <InputForm error={methods.errors.company} inputName=\"company\" labelName=\"Entreprise\" ></InputForm> \n                              <InputForm error={methods.errors.departement} inputName=\"departement\" labelName=\"Département\" ></InputForm> \n                              <InputForm error={methods.errors.adress} inputName=\"adress\" labelName=\"Adresse\" ></InputForm> \n                              <InputForm error={methods.errors.numberadress} inputName=\"numberadress\" labelName=\"N°\" ></InputForm> \n                              <InputForm error={methods.errors.npa} type=\"number\" inputName=\"npa\" labelName=\"NPA\" ></InputForm> \n                              <InputForm error={methods.errors.pays} inputName=\"pays\" labelName=\"Pays\" ></InputForm>\n                              <InputForm error={methods.errors.tel} inputName=\"tel\" labelName=\"Téléphone\" ></InputForm>\n                              <InputForm error={methods.errors.comments} inputName=\"comments\" labelName=\"Commentaires\" ></InputForm> \n                               \n                            <button type=\"submit\">Envoyer</button>\n                          </form>\n\n                          </FormContext>\n\n      if (formOk) {\n        return (\n          MessageValidation\n        )\n      }\n      else {\n        return (\n          CepecFormRequest\n        )\n      }\n          \n}\n\n\nexport default InfoForm;","import React from 'react';\nimport { useStateMachine } from \"little-state-machine\";\nimport updateAction from \"./updateAction\";\nimport { Card , ListGroup, Row, Col} from 'react-bootstrap';\n\nfunction Result () {\n\nconst { state } = useStateMachine(updateAction);\n\nconst data = Object.entries(state.data).map(([key, value]) => ({key, value}))\n\nconsole.log(data)\n\n  return (\n   \n    <div>\n        <h1>Mes informations</h1>\n        <Row className=\"justify-content-md-center\">\n        <Col md=\"auto\">\n            <Card style={{ width: '500px' }}>\n            <ListGroup>\n            {data.map(item =>\n            <ListGroup.Item style={{ height: '50px'}}>{item.value}</ListGroup.Item>\n            )}\n            </ListGroup>\n            </Card>\n        </Col>\n\n        </Row>\n          \n    </div>\n  )\n}\n\n\nexport default Result","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport { StateMachineProvider, createStore } from \"little-state-machine\";\nimport './App.css';\nimport InfoForm from './form';\nimport Result from './result';\n\ncreateStore({\n  data: {}\n});\n\n\nfunction App() {\n  \n  return (\n    <StateMachineProvider>\n      <Router>\n        <Route exact path=\"/\" component={InfoForm} />\n        <Route path=\"/result\" component={Result} />\n      </Router>\n    </StateMachineProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}